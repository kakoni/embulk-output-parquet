plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "checkstyle"

    id "org.embulk.embulk-plugins" version "0.7.0"
    id 'tech.yanand.maven-central-publish' version '1.3.0'
}

group = "io.github.shin1103"
version = "0.1.0"
description = "An Embulk plugin to output Parquet files to local filesystem."

sourceCompatibility = 8
targetCompatibility = 8
compileJava.options.encoding = 'UTF-8'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }

    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

ext {
    hadoopVersion = '3.4.0'
}

dependencies {
    compileOnly "org.embulk:embulk-spi:0.11"

    implementation("org.embulk:embulk-util-config:0.5.0")

    implementation "org.apache.hadoop:hadoop-common:$hadoopVersion"
    implementation "org.apache.parquet:parquet-avro:1.15.2"

    testImplementation "junit:junit:4.13.2"

    testImplementation "org.embulk:embulk-spi:0.11"
    testImplementation "org.embulk:embulk-core:0.11.5"
    testImplementation "org.embulk:embulk-deps:0.11.5"
    testImplementation "org.embulk:embulk-junit4:0.11.5"
}

embulkPlugin {
    mainClass = "io.github.shin1103.embulk.output.parquet.ParquetOutputPlugin"
    category = "output"
    type = "parquet"
}

jar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}
sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}
javadocJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

// The publishing settings are usually required to publish the plugin to Maven Central.
// Publish it by: "./gradlew publishMavenPublicationToMavenRepository"
publishing {
    publications {
        create('maven', MavenPublication)  {
            groupId = "io.github.shin1103"
            artifactId = "embulk-output-iceberg"
            version = "0.2.0"

            from ((SoftwareComponent) components.java)
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            // Some pom.xml attributes are mandatory in Maven Central.
            // See: https://central.sonatype.org/pages/requirements.html
            pom {
                packaging "jar"

                name = "embulk-output-iceberg"
                description = project.description
                url = "https://github.com/shin1103/embulk-output-iceberg"

                licenses {
                    license {
                        // See: http://central.sonatype.org/pages/requirements.html#license-information
                        name = "MIT License"
                        url = "https://github.com/shin1103/embulk-output-iceberg/blob/main/LICENSE"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        name = "Shinichi Hashiba"
                        email = "shinichi.hashiba@gmail.com"
                    }
                }

                scm {
                    connection = "scm:git:https://github.com/shin1103/embulk-output-iceberg.git"
                    developerConnection = "scm:git:https://github.com/shin1103/embulk-output-iceberg.git"
                    url = "https://github.com/shin1103/embulk-output-iceberg"
                }
            }
        }
    }

    repositories {
        maven {
            name = "local"
            url = layout.buildDirectory.dir('repos/bundles')
        }
    }
}

mavenCentral {
    repoDir = layout.buildDirectory.dir('repos/bundles')
    authToken = System.getenv("AUTH_TOKEN")
    publishingType = 'AUTOMATIC'
    maxWait = 60
}

// The signing settings are usually required to publish the plugin to Maven Central.
// See: https://central.sonatype.org/publish/requirements/gpg/
signing {
    // Just an optional technique to specify a GPG key and password from Gradle properties.
    //
    // Set your GPG key into "signingKey" in the ASCII armor format.
    // Set your GPG key password into "signingPassword".
    //
    // It is sometimes useful to publish the plugin to Maven Central from CI like GitHub Actions.
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys((String)signingKey, (String)signingPassword)
    }

//    useInMemoryPgpKeys(System.getenv("PGP_SIGNING_KEY") , System.getenv("PGP_SIGNING_KEY_PASSPHRASE"))
//    required { gradle.taskGraph.hasTask("publishMavenJavaPublicationToMavenRepository") }
    sign publishing.publications.maven
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
checkstyleTest {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}

gem {
    authors = [ "Shinichi Hashiba" ]
    email = [ "shinichi.hashiba@gmail.com" ]
    // "description" of the Ruby Gem would come from "description" of the Gradle project.
    summary = "iceberg output plugin for Embulk"
    homepage = "https://github.com/shin1103/embulk-output-iceberg"
    licenses = [ "MIT" ]  // See: https://guides.rubygems.org/specification-reference/#license=

}

// Push it by: "./gradlew gemPush"
gemPush {
    host = "https://rubygems.org"
}
